import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.impute import KNNImputer
from sklearn.preprocessing import StandardScaler
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Step 1: Simulated traffic dataset
# Replace this with your real CSV file or DB source
np.random.seed(42)
n = 1000
data = pd.DataFrame({
    'timestamp': pd.date_range('2023-01-01', periods=n, freq='H'),
    'temperature': np.random.normal(20, 5, n),
    'humidity': np.random.uniform(30, 70, n),
    'wind_speed': np.random.normal(10, 2, n),
    'is_weekend': np.random.choice([0, 1], n),
    'volume': np.random.poisson(100, n)
})

# Step 2: Introduce some missing values
for col in ['temperature', 'humidity', 'wind_speed']:
    data.loc[data.sample(frac=0.1).index, col] = np.nan

# Step 3: Feature engineering
data['hour'] = data['timestamp'].dt.hour
data['dayofweek'] = data['timestamp'].dt.dayofweek

# Drop timestamp (or keep it for time series modeling)
data.drop(columns=['timestamp'], inplace=True)

# Step 4: Handle missing values using KNN Imputer
imputer = KNNImputer(n_neighbors=5)
data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Step 5: Train-test split
X = data_imputed.drop('volume', axis=1)
y = data_imputed['volume']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Optional: Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Train a model
model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
model.fit(X_train_scaled, y_train)

# Step 7: Evaluate
y_pred = model.predict(X_test_scaled)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f}")
print(f"RÂ²: {r2:.2f}")
