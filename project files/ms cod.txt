import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
import pandas as pd
from sklearn.metrics import mean_absolute_error, r2_score

# === 1. Load or Simulate Traffic Data ===
# Simulating a sample dataset for demonstration
np.random.seed(42)
n_samples = 1000

data = pd.DataFrame({
    'hour': np.random.randint(0, 24, size=n_samples),
    'day_of_week': np.random.randint(0, 7, size=n_samples),
    'temperature': np.random.normal(20, 5, size=n_samples),
    'rain': np.random.binomial(1, 0.2, size=n_samples),
    'holiday': np.random.binomial(1, 0.1, size=n_samples),
    'sensor_id': np.random.randint(1, 10, size=n_samples),
    'traffic_volume': np.random.poisson(300, size=n_samples)
})

# === 2. Feature and Target Split ===
X = data.drop(columns=['traffic_volume'])
y = data['traffic_volume']

# === 3. Train-Test Split ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === 4. Feature Scaling ===
# StandardScaler for normal distribution features (e.g., temperature)
# MinMaxScaler for bounded features (e.g., hour, day_of_week)
scaler_standard = StandardScaler()
scaler_minmax = MinMaxScaler()

# Select columns to scale
standard_cols = ['temperature']
minmax_cols = ['hour', 'day_of_week', 'sensor_id']

# Fit and transform
X_train_scaled = X_train.copy()
X_test_scaled = X_test.copy()

X_train_scaled[standard_cols] = scaler_standard.fit_transform(X_train[standard_cols])
X_test_scaled[standard_cols] = scaler_standard.transform(X_test[standard_cols])

X_train_scaled[minmax_cols] = scaler_minmax.fit_transform(X_train[minmax_cols])
X_test_scaled[minmax_cols] = scaler_minmax.transform(X_test[minmax_cols])

# === 5. Train Model ===
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# === 6. Evaluate ===
y_pred = model.predict(X_test_scaled)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("R^2 Score:"
